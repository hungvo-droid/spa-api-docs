{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"SPA Customer Service Documentation","text":"<p>Welcome to the SPA Customer Service API documentation.</p> <p>This documentation provides detailed information about using the SPA Customer Service API, including endpoints, request formats, and response examples.</p>"},{"location":"index.html#getting-started","title":"Getting Started","text":"<p>To get started, visit the API Documentation page for related agents tasks. For handler, \\  visit Facebook API document for Facebook tasks, visit Zalo API document for Zalo tasks and Telegram for Telegram tasks.</p>"},{"location":"Facebook.html","title":"Facebook Messenger API Documentation","text":"<p>This document describes the API endpoints for the Facebook Messenger integration service that handles webhook events, message processing, page management, and OAuth authentication through a Pub/Sub architecture.</p>"},{"location":"Facebook.html#general-flow","title":"General Flow","text":"<ol> <li>OAuth Authentication: Complete Facebook OAuth flow to obtain user access tokens</li> <li>Page Management: Get and manage Facebook pages with their access tokens</li> <li>Page Subscription: Subscribe pages to Messenger events</li> <li>Webhook Setup: Configure webhook URL for receiving Facebook events</li> <li>Message Processing: Receive messages via webhook and publish to Pub/Sub</li> <li>Response Delivery: Service receives responses from Pub/Sub and sends to Facebook users</li> </ol> <p>This flow enables your application to authenticate users, connect to Facebook pages, process messages through AI agents, and maintain real-time conversations.</p>"},{"location":"Facebook.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Architecture Overview</li> <li>Environment Variables</li> <li>OAuth Authentication</li> <li>Page Management</li> <li>Webhook Endpoints</li> <li>Message Management</li> <li>Pub/Sub Integration</li> <li>Admin Endpoints</li> <li>Health Check</li> <li>Error Handling</li> </ul>"},{"location":"Facebook.html#architecture-overview","title":"Architecture Overview","text":"<p>The service implements a Facebook Messenger integration with the following components:</p> <ul> <li>OAuth Integration: Complete Facebook OAuth flow for user authentication</li> <li>Pub/Sub Integration: Messages are published to Google Cloud Pub/Sub for processing</li> <li>Message Debouncing: Prevents duplicate processing and batches rapid messages (4-second window)</li> <li>Session Management: Maintains user sessions with visit counts and preferences</li> <li>Page Management: Database storage for Facebook page configurations</li> <li>Webhook Forwarding: Forwards messages to configured webhook URLs</li> <li>AI Toggle: Per-page control over AI processing</li> </ul>"},{"location":"Facebook.html#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>APP_URL</code> Base URL for the agent API Required <code>FACEBOOK_PAGE_TOKEN</code> Facebook page access token Required <code>FACEBOOK_VERIFY_TOKEN</code> Webhook verification token \"digiworker\" <code>AGENT_APP_NAME</code> Application name for sessions \"customer_support\" <code>PORT</code> Server port 8080 <code>ADMIN_SECRET_KEY</code> Admin authentication key \"admin123\" <code>WEBHOOK_URL</code> Base webhook URL Required <code>FACEBOOK_APP_ID</code> Facebook app ID for OAuth Required <code>FACEBOOK_APP_SECRET</code> Facebook app secret for OAuth Required <code>FACEBOOK_REDIRECT_URI</code> OAuth redirect URI Auto-generated <code>GOOGLE_CLOUD_PROJECT</code> Google Cloud Project ID Required"},{"location":"Facebook.html#oauth-authentication","title":"OAuth Authentication","text":""},{"location":"Facebook.html#get-apifacebookoauthurl","title":"GET /api/facebook/oauth/url","text":"<p>Get Facebook OAuth URL for user login.</p> <p>Query Parameters:</p> <ul> <li><code>redirect_uri</code> - Optional redirect URI (defaults to config)</li> <li><code>state</code> - Optional state parameter for CSRF protection</li> <li><code>secret_key</code> - Admin secret key</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"oauth_url\": \"https://www.facebook.com/v19.0/dialog/oauth?...\",\n  \"state\": \"generated_state\"\n}\n</code></pre></p> <p>OAuth Scopes:</p> <ul> <li><code>email</code> - User email access</li> <li><code>pages_show_list</code> - List user's pages</li> <li><code>pages_read_user_content</code> - Read page content</li> <li><code>pages_read_engagement</code> - Read page engagement</li> <li><code>pages_manage_metadata</code> - Manage page metadata</li> <li><code>pages_messaging</code> - Send messages from pages</li> </ul>"},{"location":"Facebook.html#get-apifacebookoauthcallback","title":"GET /api/facebook/oauth/callback","text":"<p>Handle Facebook OAuth callback.</p> <p>Query Parameters:</p> <ul> <li><code>code</code> - Authorization code from Facebook</li> <li><code>state</code> - State parameter for CSRF protection</li> <li><code>error</code> - Error code if OAuth failed (optional)</li> <li><code>error_reason</code> - Reason for the error (optional)</li> <li><code>error_description</code> - Description of the error (optional)</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"access_token\": \"user_access_token\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 3600,\n  \"user\": {\n    \"id\": \"user_id\",\n    \"name\": \"User Name\",\n    \"email\": \"user@example.com\"\n  }\n}\n</code></pre></p>"},{"location":"Facebook.html#page-management","title":"Page Management","text":""},{"location":"Facebook.html#post-apifacebookpages","title":"POST /api/facebook/pages","text":"<p>Get a list of Facebook pages that the user can manage (Get from Facebook API). Also store them in DB (not connected_at status).</p> <p>Request Body: <pre><code>{\n  \"user_access_token\": \"user_access_token\"\n}\n</code></pre></p> <p>Query Parameters:</p> <ul> <li><code>secret_key</code> - Admin secret key</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"pages\": [\n    {\n      \"id\": \"page_id\",\n      \"name\": \"Page Name\",\n      \"category\": \"Business\",\n      \"access_token\": \"page_access_token\",\n      \"permissions\": [...]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"Facebook.html#get-apifacebookpagesstored_adminid","title":"GET /api/facebook/pages/stored_adminid","text":"<p>Get all Facebook pages stored in the database for an admin (Get from DB).</p> <p>Query Parameters:</p> <ul> <li><code>admin_email</code> - Admin email address</li> <li><code>secret_key</code> - Admin secret key</li> <li><code>list_page</code> - If true, return only filtered fields</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"pages\": [\n    {\n      \"page_id\": \"page_id\",\n      \"page_name\": \"Page Name\",\n      \"page_access_token\": \"page_access_token\",\n      \"webhook_url\": \"https://webhook-url.com\",\n      \"using_ai\": true,\n      \"connected_at\": \"timestamp\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"Facebook.html#post-apifacebooksubscribe","title":"POST /api/facebook/subscribe","text":"<p>Subscribe the app to Messenger events for a Facebook Page.</p> <p>Request Body: <pre><code>{\n  \"email\": \"admin_email\",\n  \"page_id\": \"page_facebook_id\",\n  \"user_access_token\": \"user_access_token\",\n  \"fields\": [\"messages\", \"messaging_postbacks\", \"messaging_optins\", \"message_deliveries\", \"message_reads\"],\n  \"callback_url\": \"https://optional-callback.com\"\n}\n</code></pre></p> <p>Query Parameters:</p> <ul> <li><code>secret_key</code> - Admin secret key</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Successfully subscribed page to Messenger events\",\n  \"page_id\": \"page_facebook_id\",\n  \"subscribed_fields\": [\"messages\", \"messaging_postbacks\"]\n}\n</code></pre></p>"},{"location":"Facebook.html#delete-apifacebookunsubscribe","title":"DELETE /api/facebook/unsubscribe","text":"<p>Unsubscribe the app from Messenger events for a Facebook Page (Only change the status of connected_at to None).</p> <p>Query Parameters:</p> <ul> <li><code>page_id</code> - Facebook page ID</li> <li><code>secret_key</code> - Admin secret key</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Successfully unsubscribed page from Messenger events\",\n  \"page_id\": \"page_facebook_id\"\n}\n</code></pre></p>"},{"location":"Facebook.html#put-apifacebookpagestoggle_ai","title":"PUT /api/facebook/pages/toggle_ai","text":"<p>Toggle AI usage for a Facebook page.</p> <p>Query Parameters:</p> <ul> <li><code>page_id</code> - Facebook page ID</li> <li><code>using_ai</code> - Boolean to enable/disable AI</li> <li><code>secret_key</code> - Admin secret key</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"AI setting updated successfully for page page_id\",\n  \"page_id\": \"page_id\",\n  \"using_ai\": true\n}\n</code></pre></p>"},{"location":"Facebook.html#webhook-endpoints","title":"Webhook Endpoints","text":""},{"location":"Facebook.html#get-webhook","title":"GET /webhook","text":"<p>Facebook webhook verification endpoint.</p> <p>Query Parameters:</p> <ul> <li><code>hub.mode</code> - Verification mode (subscribe)</li> <li><code>hub.verify_token</code> - Verification token</li> <li><code>hub.challenge</code> - Challenge string</li> </ul> <p>Response: Returns the challenge string if verification is successful.</p> <p>Example: <pre><code>curl \"https://your-domain.com/webhook?hub.mode=subscribe&amp;hub.verify_token=digiworker&amp;hub.challenge=1234567890\"\n</code></pre></p>"},{"location":"Facebook.html#post-webhook","title":"POST /webhook","text":"<p>Handles incoming webhook events from Facebook Messenger.</p> <p>Request Body: Facebook webhook event data</p> <p>Response: <code>{\"status\": \"ok\"}</code></p> <p>Supported Events:</p> <ul> <li>Text messages</li> <li>Postback events</li> <li>Message deliveries</li> <li>Message reads</li> </ul> <p>Features:</p> <ul> <li>Message Deduplication: Prevents processing duplicate messages using unique keys</li> <li>Message Debouncing: Batches rapid messages from the same user (4-second window)</li> <li>Page Validation: Checks if page exists and is connected before processing</li> <li>User Storage: Stores user information in database</li> <li>Webhook Forwarding: Forwards messages to configured webhook URLs</li> </ul>"},{"location":"Facebook.html#message-management","title":"Message Management","text":""},{"location":"Facebook.html#post-apifacebooksend_message","title":"POST /api/facebook/send_message","text":"<p>Send a message to a Facebook user.</p> <p>Request Body: <pre><code>{\n  \"recipient_id\": \"user_facebook_id\",\n  \"message_text\": \"Hello from the bot!\",\n  \"page_id\": \"page_facebook_id\",\n  \"author\": \"admin_name\",\n  \"role\": \"admin\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"ok\"\n}\n</code></pre></p> <p>Processing:</p> <ol> <li>Sends message to Facebook user via Graph API</li> <li>Adds message to session for tracking (if that message is not from Agents but Admin).</li> <li>Forwards message to configured webhook URL</li> </ol>"},{"location":"Facebook.html#post-apipost_message","title":"POST /api/post_message","text":"<p>Generic endpoint to post message to any URL (for all type of messages).</p> <p>Request Body: <pre><code>{\n  \"url\": \"https://example.com/webhook\",\n  \"message_data\": {\n    \"role\": \"user\",\n    \"message\": \"Hello\"\n  },\n  \"headers\": {\n    \"Content-Type\": \"application/json\"\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"status_code\": 200,\n  \"data\": \"response_data\"\n}\n</code></pre></p>"},{"location":"Facebook.html#webhook-configuration","title":"Webhook Configuration","text":""},{"location":"Facebook.html#post-apifacebookpagesadd_webhook","title":"POST /api/facebook/pages/add_webhook","text":"<p>Add webhook URL to an existing Facebook page.</p> <p>Request Body: <pre><code>{\n  \"page_id\": \"page_facebook_id\",\n  \"webhook_url\": \"https://your-domain.com/webhook\",\n  \"secret_key\": \"admin123\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Webhook URL added successfully to page page_id\",\n  \"page_id\": \"page_facebook_id\",\n  \"webhook_url\": \"https://your-domain.com/webhook\"\n}\n</code></pre></p>"},{"location":"Facebook.html#get-apifacebookpagesget_webhook","title":"GET /api/facebook/pages/get_webhook","text":"<p>Get webhook URL for a specific page.</p> <p>Query Parameters:</p> <ul> <li><code>page_id</code> - Facebook page ID</li> <li><code>secret_key</code> - Admin secret key</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"page_id\": \"page_facebook_id\",\n  \"webhook_url\": \"https://your-domain.com/webhook\",\n  \"has_webhook\": true\n}\n</code></pre></p>"},{"location":"Facebook.html#delete-apifacebookpagesdelete_webhook","title":"DELETE /api/facebook/pages/delete_webhook","text":"<p>Remove webhook URL from a page.</p> <p>Query Parameters:</p> <ul> <li><code>page_id</code> - Facebook page ID</li> <li><code>secret_key</code> - Admin secret key</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Webhook URL removed successfully from page page_id\",\n  \"page_id\": \"page_facebook_id\"\n}\n</code></pre></p>"},{"location":"Facebook.html#pubsub-integration","title":"Pub/Sub Integration","text":""},{"location":"Facebook.html#post-post_message_pubsub","title":"POST /post_message_pubsub","text":"<p>Receives Pub/Sub push deliveries from the agent processing system, process and send to the users &amp; webhooks.</p> <p>Request Body: <code>PubSubPushEnvelope</code> <pre><code>{\n  \"message\": {\n    \"data\": \"string (base64 encoded)\",\n    \"message_id\": \"string\",\n    \"publish_time\": \"string\"\n  },\n  \"subscription\": \"string\"\n}\n</code></pre></p> <p>Response: No content (HTTP 204)</p> <p>Processing Logic:</p> <ol> <li>Decodes base64 message data</li> <li>Validates platform is \"facebook\"</li> <li>Extracts user_id, message text, and page_id</li> <li>Removes markdown formatting from response text</li> <li>Sends message to Facebook user asynchronously</li> <li>Forwards message to webhook URL</li> </ol> <p>Status Codes:</p> <ul> <li><code>204 No Content</code>: Successfully processed (always returns 204 to avoid Pub/Sub retries)</li> </ul>"},{"location":"Facebook.html#message-processing-flow","title":"Message Processing Flow","text":""},{"location":"Facebook.html#1-message-reception","title":"1. Message Reception","text":"<pre><code>Facebook User \u2192 Facebook API \u2192 Webhook \u2192 Service\n</code></pre>"},{"location":"Facebook.html#2-message-publishing","title":"2. Message Publishing","text":"<pre><code>Service \u2192 Pub/Sub Topic \u2192 Agent Processing\n</code></pre> <p>Message Format: <pre><code>{\n  \"app_name\": \"customer_support\",\n  \"user_id\": \"facebook_user_id\",\n  \"session_id\": \"facebook_{user_id}\",\n  \"new_message\": {\n    \"role\": \"user\",\n    \"parts\": [{\"text\": \"user message\"}]\n  },\n  \"platform\": \"facebook\",\n  \"streaming\": false\n}\n</code></pre></p>"},{"location":"Facebook.html#3-response-processing","title":"3. Response Processing","text":"<pre><code>Agent Processing \u2192 Pub/Sub Subscription \u2192 Service \u2192 Facebook API \u2192 User\n</code></pre> <p>Response Format: <pre><code>{\n  \"platform\": \"facebook\",\n  \"user_id\": \"facebook_user_id\",\n  \"new_message\": {\n    \"role\": \"assistant\",\n    \"parts\": [{\"text\": \"agent response\"}]\n  },\n  \"holder_id\": \"page_id\"\n}\n</code></pre></p>"},{"location":"Facebook.html#admin-endpoints","title":"Admin Endpoints","text":""},{"location":"Facebook.html#get-admin","title":"GET /admin","text":"<p>Admin interface for managing conversations.</p> <p>Query Parameters:</p> <ul> <li><code>secret_key</code> - Admin secret key</li> </ul> <p>Response: <pre><code>{\n  \"active_users\": [\"user_id_1\", \"user_id_2\"],\n  \"admin_controlled_users\": [\"user_id_3\"]\n}\n</code></pre></p>"},{"location":"Facebook.html#get-apiget_manage_fb_info","title":"GET /api/get_manage_fb_info","text":"<p>Get managed Facebook page information for an admin.</p> <p>Query Parameters:</p> <ul> <li><code>email</code> - Admin email address</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"users\": [...],\n  \"pages\": [...]\n}\n</code></pre></p>"},{"location":"Facebook.html#post-apifacebookadd_message_to_session","title":"POST /api/facebook/add_message_to_session","text":"<p>Add a message to the session for tracking.</p> <p>Request Body: <pre><code>{\n  \"app_name\": \"customer_support\",\n  \"user_id\": \"user_id\",\n  \"session_id\": \"session_id\",\n  \"role\": \"user|admin\",\n  \"text\": \"message text\",\n  \"author\": \"author_name\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"message\": \"Message added to session\"\n}\n</code></pre></p>"},{"location":"Facebook.html#pubsub-management","title":"Pub/Sub Management","text":""},{"location":"Facebook.html#get-pubsubstatus","title":"GET /pubsub/status","text":"<p>Check Pub/Sub topic and subscription status.</p> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"monitoring_active\": true,\n  \"topic\": {\n    \"name\": \"topic_name\",\n    \"exists\": true\n  },\n  \"subscription\": {\n    \"name\": \"subscription_name\",\n    \"status\": \"active\"\n  }\n}\n</code></pre></p>"},{"location":"Facebook.html#post-pubsubstart","title":"POST /pubsub/start","text":"<p>Start Pub/Sub message monitoring.</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Pub/Sub monitoring started\",\n  \"subscription\": \"subscription_path\"\n}\n</code></pre></p>"},{"location":"Facebook.html#post-pubsubstop","title":"POST /pubsub/stop","text":"<p>Stop Pub/Sub message monitoring.</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Pub/Sub monitoring stopped\"\n}\n</code></pre></p>"},{"location":"Facebook.html#health-check","title":"Health Check","text":""},{"location":"Facebook.html#get-health","title":"GET /health","text":"<p>Health check endpoint to verify service status (Mainly for Cloud Run status checking).</p> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"app_name\": \"customer_support\",\n  \"facebook_configured\": true\n}\n</code></pre></p> <p>Status Codes: - <code>200 OK</code>: Service is healthy - <code>500 Internal Server Error</code>: Service health check failed</p>"},{"location":"Facebook.html#error-handling","title":"Error Handling","text":"<p>All endpoints return appropriate HTTP status codes:</p> <ul> <li><code>200</code> - Success</li> <li><code>204</code> - No Content (Pub/Sub responses)</li> <li><code>400</code> - Bad Request (missing parameters, invalid data)</li> <li><code>401</code> - Unauthorized (invalid access token)</li> <li><code>403</code> - Forbidden (invalid admin key)</li> <li><code>404</code> - Not Found (page not found)</li> <li><code>500</code> - Internal Server Error</li> </ul> <p>Error responses include a <code>detail</code> field with the error message:</p> <pre><code>{\n  \"detail\": \"Error description\"\n}\n</code></pre>"},{"location":"Facebook.html#message-features","title":"Message Features","text":""},{"location":"Facebook.html#debouncing","title":"Debouncing","text":"<ul> <li>Messages from the same user are queued for 4 seconds</li> <li>Rapid messages are combined into a single request</li> <li>Prevents spam and improves processing efficiency</li> </ul>"},{"location":"Facebook.html#deduplication","title":"Deduplication","text":"<ul> <li>Uses unique message keys to prevent duplicate processing</li> <li>Maintains a cache of processed messages (max 10,000 entries)</li> <li>Automatically clears cache when full</li> </ul>"},{"location":"Facebook.html#session-management","title":"Session Management","text":"<ul> <li>Unique session IDs for each Facebook user</li> <li>Tracks visit counts and message timestamps</li> <li>Maintains conversation context and preferences</li> </ul>"},{"location":"Facebook.html#ai-toggle","title":"AI Toggle","text":"<ul> <li>Per-page control over AI processing</li> <li>Messages from pages with AI disabled are stored but not processed</li> <li>Admin can toggle AI on/off via API</li> </ul>"},{"location":"Facebook.html#webhook-forwarding","title":"Webhook Forwarding","text":"<ul> <li>Forwards all messages to configured webhook URLs</li> <li>Includes message metadata and timestamps</li> <li>Supports custom headers and authentication</li> </ul>"},{"location":"Facebook.html#markdown-processing","title":"Markdown Processing","text":"<ul> <li>Removes markdown formatting from agent responses</li> <li>Converts to plain text for Facebook compatibility</li> <li>Handles code blocks, links, and formatting</li> </ul>"},{"location":"Facebook.html#database-operations","title":"Database Operations","text":"<p>The service uses PostgreSQL to store:</p> <ul> <li>Facebook Pages: Page ID, access token, name, webhook URL, AI settings</li> <li>User Sessions: Conversation history and preferences</li> <li>User Accounts: Admin user information and page associations</li> <li>Message Events: Tracking of all message interactions</li> </ul>"},{"location":"Facebook.html#rate-limiting","title":"Rate Limiting","text":"<p>The service implements message queuing to handle high message volumes:</p> <ul> <li>Messages are queued per user</li> <li>Processing is delayed by 4 seconds to batch messages</li> <li>Duplicate messages are automatically filtered</li> <li>Processing tasks are cancelled and recreated for new messages</li> </ul>"},{"location":"Facebook.html#deployment","title":"Deployment","text":"<p>The service runs on the configured port (default: 8080) and requires:</p> <ol> <li>Valid Facebook App configuration</li> <li>PostgreSQL database access</li> <li>Google Cloud authentication (for agent API)</li> <li>Pub/Sub topic and subscription setup</li> <li>Proper environment variable configuration</li> </ol> <p>To run the deployment:</p> <ol> <li>Load the .env in <code>spa_customer_service/agents/customer-support</code> with command in terminal <code>export $(grep -v '^#' .env | xargs)</code></li> <li>Prepare the env.yaml in <code>spa_customer_service/agents/customer-support/deployment_facebook</code></li> <li>Run deploy script <code>bash deploy.sh</code> in terminal</li> </ol> <p>Note: If you clone from github, please get from branch <code>deploy/messenger_handler</code></p>"},{"location":"Facebook.html#integration-with-main-agent-service","title":"Integration with Main Agent Service","text":"<p>This Facebook service integrates with the main agent service through Pub/Sub:</p> <ol> <li>Message Flow: Facebook \u2192 Webhook \u2192 Pub/Sub \u2192 Agent \u2192 Pub/Sub \u2192 Facebook</li> <li>Session Management: Each Facebook user gets a unique session ID</li> <li>OAuth Integration: Complete Facebook OAuth flow for secure authentication</li> <li>Page Management: Database storage and management of Facebook pages</li> <li>Webhook Forwarding: Built-in webhook forwarding for external integrations</li> </ol> <p>The service acts as a bridge between Facebook's Messenger platform and the main agent processing infrastructure, enabling scalable, secure Facebook Messenger integration with advanced features like AI toggling and webhook forwarding.</p>"},{"location":"Telegram.html","title":"Telegram Bot API Documentation","text":"<p>This document describes the API endpoints for the Telegram bot integration service that handles webhook events, message processing, and bot management through a Pub/Sub architecture.</p>"},{"location":"Telegram.html#general-flow","title":"General Flow","text":"<ol> <li>Bot Registration: Register a Telegram bot with its token and webhook configuration</li> <li>Webhook Setup: Configure webhook URL for each bot with a secret token</li> <li>Message Reception: Receive messages via webhook and publish to Pub/Sub</li> <li>Message Processing: Agent processes messages and publishes responses back to Pub/Sub</li> <li>Response Delivery: Service receives responses from Pub/Sub and sends to Telegram users</li> </ol> <p>This flow enables your application to handle multiple Telegram bots, process messages through AI agents, and maintain real-time conversations.</p>"},{"location":"Telegram.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Architecture Overview</li> <li>Environment Variables</li> <li>Bot Management</li> <li>Webhook Endpoints</li> <li>Pub/Sub Integration</li> <li>Health Check</li> <li>Error Handling</li> </ul>"},{"location":"Telegram.html#architecture-overview","title":"Architecture Overview","text":"<p>The service implements a multi-bot architecture with the following components:</p> <ul> <li>Multi-bot Support: Single webhook endpoint handles multiple bots identified by secret tokens</li> <li>Pub/Sub Integration: Messages are published to Google Cloud Pub/Sub for processing</li> <li>Message Debouncing: Prevents duplicate processing and batches rapid messages</li> <li>Database Storage: Bot configurations and user sessions stored in PostgreSQL</li> <li>Asynchronous Processing: Non-blocking message handling and response delivery</li> </ul>"},{"location":"Telegram.html#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>AGENT_APP_NAME</code> Application name for sessions \"customer_support\" <code>PORT</code> Server port 8080 <code>GOOGLE_CLOUD_PROJECT</code> Google Cloud Project ID Required <code>PUBSUB_TOPIC</code> Pub/Sub topic for message publishing \"agent-listener\" <code>PUBSUB_SUBSCRIPTION</code> Pub/Sub subscription for responses \"agent-push\""},{"location":"Telegram.html#bot-management","title":"Bot Management","text":""},{"location":"Telegram.html#post-telegramcreate_bot","title":"POST /telegram/create_bot","text":"<p>Create a new Telegram bot configuration.</p> <p>Request Body: <pre><code>{\n  \"bot_id\": \"string\",\n  \"bot_username\": \"string\",\n  \"bot_name\": \"string\",\n  \"bot_token\": \"string\",\n  \"webhook_secret\": \"string\",\n  \"webhook_url\": \"string\",\n  \"managed_by_id\": \"string\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\"\n}\n</code></pre></p> <p>Status Codes: - <code>200 OK</code>: Successfully created bot - <code>500 Internal Server Error</code>: Database error</p>"},{"location":"Telegram.html#post-telegramdelete_bot","title":"POST /telegram/delete_bot","text":"<p>Delete a Telegram bot configuration.</p> <p>Request Body: <pre><code>{\n  \"bot_token\": \"string\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\"\n}\n</code></pre></p> <p>Status Codes: - <code>200 OK</code>: Successfully deleted bot - <code>500 Internal Server Error</code>: Database error</p>"},{"location":"Telegram.html#post-telegramupdate_bot","title":"POST /telegram/update_bot","text":"<p>Update an existing Telegram bot configuration.</p> <p>Request Body: <pre><code>{\n  \"bot_token\": \"string\",\n  \"bot_username\": \"string\",\n  \"bot_name\": \"string\",\n  \"webhook_secret\": \"string\",\n  \"webhook_url\": \"string\",\n  \"managed_by_id\": \"string\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\"\n}\n</code></pre></p> <p>Status Codes: - <code>200 OK</code>: Successfully updated bot - <code>500 Internal Server Error</code>: Database error</p>"},{"location":"Telegram.html#get-telegramget_bot","title":"GET /telegram/get_bot","text":"<p>Get bot configuration by token.</p> <p>Query Parameters: - <code>bot_token</code> (string, required): The bot's access token</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"bot\": {\n    \"bot_id\": \"string\",\n    \"bot_username\": \"string\",\n    \"bot_name\": \"string\",\n    \"bot_token\": \"string\",\n    \"webhook_secret\": \"string\",\n    \"webhook_url\": \"string\",\n    \"managed_by_id\": \"string\"\n  }\n}\n</code></pre></p> <p>Status Codes: - <code>200 OK</code>: Successfully retrieved bot - <code>404 Not Found</code>: Bot not found</p>"},{"location":"Telegram.html#webhook-endpoints","title":"Webhook Endpoints","text":""},{"location":"Telegram.html#get-telegramwebhook","title":"GET /telegram/webhook","text":"<p>Telegram webhook verification endpoint.</p> <p>Response: Returns \"OK\" for webhook verification.</p> <p>Example: <pre><code>curl \"https://your-domain.com/telegram/webhook\"\n</code></pre></p>"},{"location":"Telegram.html#post-telegramwebhook","title":"POST /telegram/webhook","text":"<p>Handles incoming webhook events from Telegram.</p> <p>Headers: - <code>X-Telegram-Bot-Api-Secret-Token</code> (required): Secret token to identify the bot</p> <p>Request Body: Telegram webhook event data</p> <p>Response: <pre><code>{\n  \"status\": \"ok\"\n}\n</code></pre></p> <p>Supported Events: - Text messages - Edited messages - Callback queries</p> <p>Features: - Bot Identification: Uses <code>X-Telegram-Bot-Api-Secret-Token</code> header to identify which bot sent the message - Message Deduplication: Prevents processing duplicate messages using <code>update_id</code> - Message Debouncing: Batches rapid messages from the same user (4-second window) - Error Handling: Sends friendly error messages on processing failures</p>"},{"location":"Telegram.html#pubsub-integration","title":"Pub/Sub Integration","text":""},{"location":"Telegram.html#post-post_message_pubsub","title":"POST /post_message_pubsub","text":"<p>Receives Pub/Sub push deliveries from the agent processing system.</p> <p>Request Body: <code>PubSubPushEnvelope</code> <pre><code>{\n  \"message\": {\n    \"data\": \"string (base64 encoded)\",\n    \"message_id\": \"string\",\n    \"publish_time\": \"string\"\n  },\n  \"subscription\": \"string\"\n}\n</code></pre></p> <p>Response: No content (HTTP 204)</p> <p>Processing Logic: 1. Decodes base64 message data 2. Validates platform is \"telegram\" 3. Extracts chat_id, message text, and bot_token 4. Removes markdown formatting from response text 5. Sends message to Telegram user asynchronously</p> <p>Status Codes: - <code>204 No Content</code>: Successfully processed (always returns 204 to avoid Pub/Sub retries)</p>"},{"location":"Telegram.html#message-processing-flow","title":"Message Processing Flow","text":""},{"location":"Telegram.html#1-message-reception","title":"1. Message Reception","text":"<pre><code>Telegram User \u2192 Telegram API \u2192 Webhook \u2192 Service\n</code></pre>"},{"location":"Telegram.html#2-message-publishing","title":"2. Message Publishing","text":"<pre><code>Service \u2192 Pub/Sub Topic \u2192 Agent Processing\n</code></pre> <p>Message Format: <pre><code>{\n  \"app_name\": \"customer_support\",\n  \"user_id\": \"telegram_chat_id\",\n  \"session_id\": \"telegram_{chat_id}\",\n  \"new_message\": {\n    \"role\": \"user\",\n    \"parts\": [{\"text\": \"user message\"}]\n  },\n  \"platform\": \"telegram\",\n  \"holder_id\": \"telegram_bot\",\n  \"streaming\": false,\n  \"telegram\": {\n    \"bot_token\": \"bot_access_token\"\n  },\n  \"created_at\": \"2024-01-01T12:00:00\"\n}\n</code></pre></p>"},{"location":"Telegram.html#3-response-processing","title":"3. Response Processing","text":"<pre><code>Agent Processing \u2192 Pub/Sub Subscription \u2192 Service \u2192 Telegram API \u2192 User\n</code></pre> <p>Response Format: <pre><code>{\n  \"platform\": \"telegram\",\n  \"user_id\": \"telegram_chat_id\",\n  \"new_message\": {\n    \"role\": \"assistant\",\n    \"parts\": [{\"text\": \"agent response\"}]\n  },\n  \"telegram\": {\n    \"bot_token\": \"bot_access_token\"\n  }\n}\n</code></pre></p>"},{"location":"Telegram.html#health-check","title":"Health Check","text":""},{"location":"Telegram.html#get-health","title":"GET /health","text":"<p>Health check endpoint to verify service status.</p> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"app_name\": \"customer_support\",\n  \"pubsub_topic\": \"agent-listener\",\n  \"pubsub_subscription\": \"agent-push\"\n}\n</code></pre></p> <p>Status Codes: - <code>200 OK</code>: Service is healthy - <code>500 Internal Server Error</code>: Service health check failed</p>"},{"location":"Telegram.html#error-handling","title":"Error Handling","text":"<p>All endpoints return appropriate HTTP status codes:</p> <ul> <li><code>200</code> - Success</li> <li><code>204</code> - No Content (Pub/Sub responses)</li> <li><code>403</code> - Forbidden (invalid bot secret)</li> <li><code>404</code> - Not Found (bot not found)</li> <li><code>500</code> - Internal Server Error</li> </ul> <p>Error responses include a <code>detail</code> field with the error message:</p> <pre><code>{\n  \"detail\": \"Error description\"\n}\n</code></pre>"},{"location":"Telegram.html#message-features","title":"Message Features","text":""},{"location":"Telegram.html#debouncing","title":"Debouncing","text":"<ul> <li>Messages from the same user are queued for 4 seconds</li> <li>Rapid messages are combined into a single request</li> <li>Prevents spam and improves processing efficiency</li> </ul>"},{"location":"Telegram.html#deduplication","title":"Deduplication","text":"<ul> <li>Uses Telegram's <code>update_id</code> to prevent duplicate processing</li> <li>Maintains a cache of processed updates (max 20,000 entries)</li> <li>Automatically clears cache when full</li> </ul>"},{"location":"Telegram.html#markdown-processing","title":"Markdown Processing","text":"<ul> <li>Removes markdown formatting from agent responses</li> <li>Converts to plain text for Telegram compatibility</li> <li>Handles code blocks, links, and formatting</li> </ul>"},{"location":"Telegram.html#error-recovery","title":"Error Recovery","text":"<ul> <li>Sends friendly error messages to users on processing failures</li> <li>Implements retry logic for Pub/Sub publishing</li> <li>Graceful handling of network failures</li> </ul>"},{"location":"Telegram.html#database-schema","title":"Database Schema","text":"<p>The service requires the following database functions:</p> <pre><code># Required functions\nadd_telegram_bot(bot_id, bot_username, bot_name, bot_token, webhook_secret, webhook_url, managed_by_id)\ndelete_telegram_bot(bot_token)\nupdate_telegram_bot(bot_token, bot_username, bot_name, webhook_secret, webhook_url, managed_by_id)\nget_telegram_bot_by_secret(secret_token) -&gt; dict | None\n\n# Optional functions\nget_telegram_bot_by_token(bot_token) -&gt; dict | None\n</code></pre>"},{"location":"Telegram.html#security-considerations","title":"Security Considerations","text":"<ol> <li>Bot Secret Validation: All webhook requests must include the correct <code>X-Telegram-Bot-Api-Secret-Token</code></li> <li>Token Management: Bot tokens are stored securely in the database</li> <li>Message Validation: All incoming messages are validated before processing</li> <li>Error Logging: Comprehensive error logging without exposing sensitive data</li> <li>Rate Limiting: Built-in debouncing prevents message spam</li> </ol>"},{"location":"Telegram.html#deployment","title":"Deployment","text":"<p>The service runs on the configured port (default: 8080) and requires:</p> <ol> <li>Valid Google Cloud Project configuration</li> <li>Pub/Sub topic and subscription setup</li> <li>PostgreSQL database with required functions</li> <li>Proper environment variable configuration</li> </ol>"},{"location":"Telegram.html#example-usage","title":"Example Usage","text":""},{"location":"Telegram.html#1-create-a-bot","title":"1. Create a Bot","text":"<pre><code>curl -X POST \"https://your-domain.com/telegram/create_bot\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"bot_id\": \"123456789\",\n    \"bot_username\": \"my_bot\",\n    \"bot_name\": \"My Telegram Bot\",\n    \"bot_token\": \"1234567890:ABCdefGHIjklMNOpqrsTUVwxyz\",\n    \"webhook_secret\": \"my_secret_token\",\n    \"webhook_url\": \"https://your-domain.com/telegram/webhook\",\n    \"managed_by_id\": \"admin_user\"\n  }'\n</code></pre>"},{"location":"Telegram.html#2-set-webhook-via-telegram-bot-api","title":"2. Set Webhook (via Telegram Bot API)","text":"<pre><code>curl -X POST \"https://api.telegram.org/bot{bot_token}/setWebhook\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"url\": \"https://your-domain.com/telegram/webhook\",\n    \"secret_token\": \"my_secret_token\"\n  }'\n</code></pre>"},{"location":"Telegram.html#3-test-health-check","title":"3. Test Health Check","text":"<pre><code>curl \"https://your-domain.com/health\"\n</code></pre>"},{"location":"Telegram.html#4-get-bot-configuration","title":"4. Get Bot Configuration","text":"<pre><code>curl \"https://your-domain.com/telegram/get_bot?bot_token=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz\"\n</code></pre>"},{"location":"Telegram.html#integration-with-main-agent-service","title":"Integration with Main Agent Service","text":"<p>This Telegram service integrates with the main agent service through Pub/Sub:</p> <ol> <li>Message Flow: Telegram \u2192 Webhook \u2192 Pub/Sub \u2192 Agent \u2192 Pub/Sub \u2192 Telegram</li> <li>Session Management: Each Telegram chat gets a unique session ID</li> <li>Multi-bot Support: Single service handles multiple bots simultaneously</li> <li>Asynchronous Processing: Non-blocking message handling for better performance</li> </ol> <p>The service acts as a bridge between Telegram's webhook system and the main agent processing infrastructure, enabling scalable, multi-bot Telegram integration.</p>"},{"location":"Zalo.html","title":"Zalo OA API Documentation","text":"<p>This document describes the API endpoints for the Zalo Official Account (OA) integration service that handles webhook events, message processing, and OA management through a Pub/Sub architecture.</p>"},{"location":"Zalo.html#general-flow","title":"General Flow","text":"<ol> <li>OAuth Authentication: Complete Zalo OAuth flow to obtain access and refresh tokens</li> <li>Webhook Setup: Configure webhook URL for receiving Zalo events</li> <li>Message Reception: Receive messages via webhook and publish to Pub/Sub</li> <li>Message Processing: Agent processes messages and publishes responses back to Pub/Sub</li> <li>Response Delivery: Service receives responses from Pub/Sub and sends to Zalo users</li> </ol> <p>This flow enables your application to handle Zalo OA interactions, process messages through AI agents, and maintain real-time conversations with automatic token refresh.</p>"},{"location":"Zalo.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Architecture Overview</li> <li>Environment Variables</li> <li>OAuth Authentication</li> <li>Webhook Endpoints</li> <li>Pub/Sub Integration</li> <li>Health Check</li> <li>Error Handling</li> </ul>"},{"location":"Zalo.html#architecture-overview","title":"Architecture Overview","text":"<p>The service implements a Zalo OA integration with the following components:</p> <ul> <li>OAuth Integration: Complete PKCE OAuth flow for Zalo OA authentication</li> <li>Pub/Sub Integration: Messages are published to Google Cloud Pub/Sub for processing</li> <li>Message Debouncing: Prevents duplicate processing and batches rapid messages (4-second window)</li> <li>Session Management: Maintains user sessions with visit counts and preferences</li> <li>Token Management: Automatic refresh of expired access tokens</li> <li>Inactivity Monitoring: Automatic cancellation of appointments after 15 minutes of inactivity</li> </ul>"},{"location":"Zalo.html#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>APP_URL</code> Base URL for the agent API Required <code>ZALO_APP_ID</code> Zalo application ID Required <code>ZALO_APP_SECRET</code> Zalo application secret Required <code>ZALO_ACCESS_TOKEN</code> Initial Zalo access token \"None\" <code>ZALO_REFRESH_TOKEN</code> Initial Zalo refresh token \"None\" <code>AGENT_APP_NAME</code> Application name for sessions \"customer_support\" <code>PORT</code> Server port 8000 <code>INACTIVITY_TIMEOUT</code> Inactivity timeout in seconds 900 (15 minutes) <code>CHECK_INACTIVE_USERS_ENABLED</code> Enable inactivity checking \"true\" <code>GOOGLE_CLOUD_PROJECT</code> Google Cloud Project ID Required <code>WEBHOOK_URL</code> Webhook URL for OAuth callback Auto-generated"},{"location":"Zalo.html#oauth-authentication","title":"OAuth Authentication","text":""},{"location":"Zalo.html#get-auth","title":"GET /auth","text":"<p>Initiate Zalo OAuth authentication flow.</p> <p>Description: Redirects user to Zalo OAuth authorization page with PKCE challenge.</p> <p>Response: HTTP 302 redirect to Zalo OAuth URL</p> <p>OAuth Flow: 1. Generates PKCE code verifier and challenge 2. Creates state parameter for CSRF protection 3. Redirects to Zalo OAuth endpoint with required parameters</p> <p>Example: <pre><code>curl \"https://your-domain.com/auth\"\n</code></pre></p>"},{"location":"Zalo.html#get-webhook-oauth-callback","title":"GET /webhook (OAuth Callback)","text":"<p>Handle OAuth callback from Zalo.</p> <p>Query Parameters: - <code>code</code> - Authorization code from Zalo - <code>state</code> - State parameter for CSRF protection - <code>error</code> - Error code if OAuth failed (optional)</p> <p>Response: - <code>200 OK</code>: \"Authentication successful! You can close this window.\" - <code>400 Bad Request</code>: Authentication error details</p> <p>Processing: 1. Validates state parameter 2. Exchanges authorization code for access and refresh tokens 3. Stores tokens in application state 4. Updates global token variables</p>"},{"location":"Zalo.html#webhook-endpoints","title":"Webhook Endpoints","text":""},{"location":"Zalo.html#get-webhook-verification","title":"GET /webhook (Verification)","text":"<p>Zalo webhook verification endpoint.</p> <p>Headers: - <code>verifier</code> - Verification token from Zalo</p> <p>Response: Returns the verifier token for webhook verification</p> <p>Example: <pre><code>curl \"https://your-domain.com/webhook\" \\\n  -H \"verifier: your_verification_token\"\n</code></pre></p>"},{"location":"Zalo.html#post-webhook","title":"POST /webhook","text":"<p>Handles incoming webhook events from Zalo OA.</p> <p>Request Body: Zalo webhook event data</p> <p>Response: <code>\"OK\"</code></p> <p>Supported Events: - <code>user_send_text</code> - Text messages from users - <code>user_send_image</code> - Image messages from users - <code>user_send_file</code> - File messages from users - <code>oa_send_text</code> - Text messages sent by OA</p> <p>Features: - User Tag Filtering: Checks user tags to determine if message should be handled by AI or admin - Message Debouncing: Batches rapid messages from the same user (4-second window) - Session Management: Maintains user sessions with visit counts and preferences - Inactivity Tracking: Monitors user activity for appointment management</p> <p>Event Processing: 1. Text Messages: Processed through AI agent or admin based on user tags 2. Media Messages: Sends fallback message requesting text format 3. OA Messages: Updates session with admin message</p>"},{"location":"Zalo.html#pubsub-integration","title":"Pub/Sub Integration","text":""},{"location":"Zalo.html#post-post_message_pubsub","title":"POST /post_message_pubsub","text":"<p>Receives Pub/Sub push deliveries from the agent processing system.</p> <p>Request Body: <code>PubSubPushEnvelope</code> <pre><code>{\n  \"message\": {\n    \"data\": \"string (base64 encoded)\",\n    \"message_id\": \"string\",\n    \"publish_time\": \"string\"\n  },\n  \"subscription\": \"string\"\n}\n</code></pre></p> <p>Response: No content (HTTP 204)</p> <p>Processing Logic: 1. Decodes base64 message data 2. Validates platform is \"zalo\" 3. Extracts user_id and message text 4. Removes markdown formatting from response text 5. Sends message to Zalo user asynchronously</p> <p>Status Codes: - <code>204 No Content</code>: Successfully processed (always returns 204 to avoid Pub/Sub retries)</p>"},{"location":"Zalo.html#message-processing-flow","title":"Message Processing Flow","text":""},{"location":"Zalo.html#1-message-reception","title":"1. Message Reception","text":"<pre><code>Zalo User \u2192 Zalo OA API \u2192 Webhook \u2192 Service\n</code></pre>"},{"location":"Zalo.html#2-message-publishing","title":"2. Message Publishing","text":"<pre><code>Service \u2192 Pub/Sub Topic \u2192 Agent Processing\n</code></pre> <p>Message Format: <pre><code>{\n  \"app_name\": \"customer_support\",\n  \"user_id\": \"zalo_user_id\",\n  \"session_id\": \"zalo_{user_id}\",\n  \"new_message\": {\n    \"role\": \"user\",\n    \"parts\": [{\"text\": \"user message\"}]\n  },\n  \"platform\": \"zalo\",\n  \"streaming\": false\n}\n</code></pre></p>"},{"location":"Zalo.html#3-response-processing","title":"3. Response Processing","text":"<pre><code>Agent Processing \u2192 Pub/Sub Subscription \u2192 Service \u2192 Zalo OA API \u2192 User\n</code></pre> <p>Response Format: <pre><code>{\n  \"platform\": \"zalo\",\n  \"user_id\": \"zalo_user_id\",\n  \"new_message\": {\n    \"role\": \"assistant\",\n    \"parts\": [{\"text\": \"agent response\"}]\n  }\n}\n</code></pre></p>"},{"location":"Zalo.html#health-check","title":"Health Check","text":""},{"location":"Zalo.html#get-_ahhealth","title":"GET /_ah/health","text":"<p>Health check endpoint to verify service status.</p> <p>Response: <pre><code>{\n  \"status\": \"healthy|unhealthy|degraded\",\n  \"details\": {\n    \"zalo\": {\n      \"oa_id\": \"string\",\n      \"oa_name\": \"string\"\n    }\n  }\n}\n</code></pre></p> <p>Status Codes: - <code>200 OK</code>: Service is healthy or degraded - <code>500 Internal Server Error</code>: Service is unhealthy</p> <p>Health Checks: 1. Token Validation: Verifies Zalo access token is valid 2. OA Profile: Fetches OA profile information 3. Token Refresh: Attempts token refresh if needed</p>"},{"location":"Zalo.html#error-handling","title":"Error Handling","text":"<p>All endpoints return appropriate HTTP status codes:</p> <ul> <li><code>200</code> - Success</li> <li><code>204</code> - No Content (Pub/Sub responses)</li> <li><code>400</code> - Bad Request (OAuth errors, invalid parameters)</li> <li><code>404</code> - Not Found (static files)</li> <li><code>500</code> - Internal Server Error</li> </ul> <p>Error responses include detailed error messages:</p> <pre><code>{\n  \"detail\": \"Error description\"\n}\n</code></pre>"},{"location":"Zalo.html#message-features","title":"Message Features","text":""},{"location":"Zalo.html#debouncing","title":"Debouncing","text":"<ul> <li>Messages from the same user are queued for 4 seconds</li> <li>Rapid messages are combined into a single request</li> <li>Prevents spam and improves processing efficiency</li> </ul>"},{"location":"Zalo.html#user-tag-filtering","title":"User Tag Filtering","text":"<ul> <li>Checks user tags via Zalo API</li> <li>Messages from users with \"NonAI\" tag are handled by admin</li> <li>Other messages are processed through AI agent</li> </ul>"},{"location":"Zalo.html#session-management","title":"Session Management","text":"<ul> <li>Unique session IDs for each Zalo user</li> <li>Tracks visit counts and message timestamps</li> <li>Maintains conversation context and preferences</li> </ul>"},{"location":"Zalo.html#inactivity-monitoring","title":"Inactivity Monitoring","text":"<ul> <li>Monitors user activity for appointment-related conversations</li> <li>Automatically cancels appointments after 15 minutes of inactivity</li> <li>Sends cancellation messages and updates session state</li> </ul>"},{"location":"Zalo.html#markdown-processing","title":"Markdown Processing","text":"<ul> <li>Removes markdown formatting from agent responses</li> <li>Converts to plain text for Zalo compatibility</li> <li>Handles code blocks, links, and formatting</li> </ul>"},{"location":"Zalo.html#token-management","title":"Token Management","text":"<ul> <li>Automatic refresh of expired access tokens</li> <li>Retry logic for failed API calls</li> <li>Graceful handling of authentication errors</li> </ul>"},{"location":"Zalo.html#database-operations","title":"Database Operations","text":"<p>The service integrates with the main agent service for session management:</p> <ul> <li>Session Creation: Creates or updates user sessions via agent API</li> <li>Event Logging: Records conversation events and admin messages</li> <li>State Management: Maintains session state with user preferences</li> </ul>"},{"location":"Zalo.html#security-considerations","title":"Security Considerations","text":"<ol> <li>OAuth Security: Implements PKCE flow for secure OAuth authentication</li> <li>State Validation: Prevents CSRF attacks in OAuth flow</li> <li>Token Management: Securely stores and refreshes Zalo access tokens</li> <li>Input Validation: Validates all incoming webhook data</li> <li>Error Logging: Comprehensive error logging without exposing sensitive data</li> </ol>"},{"location":"Zalo.html#rate-limiting","title":"Rate Limiting","text":"<p>The service implements message queuing to handle high message volumes:</p> <ul> <li>Messages are queued per user</li> <li>Processing is delayed by 4 seconds to batch messages</li> <li>Duplicate messages are automatically filtered</li> <li>Processing tasks are cancelled and recreated for new messages</li> </ul>"},{"location":"Zalo.html#deployment","title":"Deployment","text":"<p>The service runs on the configured port (default: 8000) and requires:</p> <ol> <li>Valid Zalo OA application configuration</li> <li>Google Cloud Project with Pub/Sub setup</li> <li>Agent API access for session management</li> <li>Proper environment variable configuration</li> </ol>"},{"location":"Zalo.html#example-usage","title":"Example Usage","text":""},{"location":"Zalo.html#1-oauth-authentication","title":"1. OAuth Authentication","text":"<pre><code># Start OAuth flow\ncurl \"https://your-domain.com/auth\"\n\n# Complete OAuth callback (browser redirect)\n# https://your-domain.com/webhook?code=authorization_code&amp;state=state_param\n</code></pre>"},{"location":"Zalo.html#2-webhook-verification","title":"2. Webhook Verification","text":"<pre><code>curl \"https://your-domain.com/webhook\" \\\n  -H \"verifier: your_verification_token\"\n</code></pre>"},{"location":"Zalo.html#3-test-health-check","title":"3. Test Health Check","text":"<pre><code>curl \"https://your-domain.com/_ah/health\"\n</code></pre>"},{"location":"Zalo.html#4-send-test-message-via-zalo-oa-api","title":"4. Send Test Message (via Zalo OA API)","text":"<pre><code>curl -X POST \"https://openapi.zalo.me/v3.0/oa/message/cs\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"access_token: your_access_token\" \\\n  -d '{\n    \"recipient\": {\"user_id\": \"user_id\"},\n    \"message\": {\"text\": \"Hello from OA!\"}\n  }'\n</code></pre>"},{"location":"Zalo.html#integration-with-main-agent-service","title":"Integration with Main Agent Service","text":"<p>This Zalo service integrates with the main agent service through Pub/Sub:</p> <ol> <li>Message Flow: Zalo \u2192 Webhook \u2192 Pub/Sub \u2192 Agent \u2192 Pub/Sub \u2192 Zalo</li> <li>Session Management: Each Zalo user gets a unique session ID</li> <li>OAuth Integration: Complete PKCE OAuth flow for secure authentication</li> <li>Token Management: Automatic refresh and validation of access tokens</li> <li>Inactivity Monitoring: Built-in appointment management with automatic cancellation</li> </ol> <p>The service acts as a bridge between Zalo's OA platform and the main agent processing infrastructure, enabling scalable, secure Zalo OA integration with advanced features like inactivity monitoring and user tag filtering.</p>"},{"location":"api_documentation.html","title":"SPA Customer Service API Documentation","text":"<p>This document provides details for all API endpoints in the SPA Customer Service application.</p>"},{"location":"api_documentation.html#application-endpoints","title":"Application Endpoints","text":""},{"location":"api_documentation.html#list-applications","title":"List Applications","text":"<p>Endpoint: <code>GET /list-apps</code> Description: List all available applications Input Schema: No parameters required Output Schema: Array of strings <pre><code>[\n  \"string\"\n]\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully retrieved applications list</p>"},{"location":"api_documentation.html#list-sessions","title":"List Sessions","text":"<p>Endpoint: <code>GET /apps/{app_name}/users/{user_id}/sessions</code> Description: List all sessions for a specific user and application Input Schema: Path parameters - <code>app_name</code> (string, required): Name of the application - <code>user_id</code> (string, required): ID of the user</p> <p>Output Schema: Array of session objects <pre><code>[session_object]\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully retrieved sessions list - <code>403 Forbidden</code>: Not authorized to access these sessions - <code>404 Not Found</code>: User or application not found</p>"},{"location":"api_documentation.html#create-session","title":"Create Session","text":"<p>Endpoint: <code>POST /apps/{app_name}/users/{user_id}/sessions</code> Description: Create a new session with an auto-generated ID Input Schema:  - Path parameters:   - <code>app_name</code> (string, required): Name of the application   - <code>user_id</code> (string, required): ID of the user</p> <ul> <li>Request Body: <pre><code>session_object\n</code></pre></li> </ul> <p>Output Schema: Same as the Get Session response</p> <p>Status Codes: - <code>200 OK</code>: Successfully created session - <code>400 Bad Request</code>: Invalid request parameters - <code>403 Forbidden</code>: Not authorized to create a session</p>"},{"location":"api_documentation.html#get-session-with-session_id","title":"Get Session with session_id","text":"<p>Endpoint: <code>GET /apps/{app_name}/users/{user_id}/sessions/{session_id}</code> Description: Retrieve a specific session by ID Input Schema: Path parameters - <code>app_name</code> (string, required): Name of the application - <code>user_id</code> (string, required): ID of the user - <code>session_id</code> (string, required): ID of the session to retrieve</p> <p>Output Schema: Session object <pre><code>session_object\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully retrieved session - <code>404 Not Found</code>: Session not found - <code>403 Forbidden</code>: Not authorized to access this session</p> <p>The data we use: To get the text of the n-th event in the chat: <code>text = session[\"events\"][n][\"content\"][\"parts\"][0][\"text\"]</code></p>"},{"location":"api_documentation.html#create-session-with-id","title":"Create Session With ID","text":"<p>Endpoint: <code>POST /apps/{app_name}/users/{user_id}/sessions/{session_id}</code> Description: Create a new session with a specified ID Input Schema:  - Path parameters:   - <code>app_name</code> (string, required): Name of the application   - <code>user_id</code> (string, required): ID of the user   - <code>session_id</code> (string, required): Desired ID for the new session</p> <ul> <li>Request Body: Output Schema: Session object <pre><code>session_object\n</code></pre></li> </ul> <p>Output Schema: Same as the Get Session response</p> <p>Status Codes: - <code>200 OK</code>: Successfully created session - <code>400 Bad Request</code>: Invalid request parameters - <code>403 Forbidden</code>: Not authorized to create a session - <code>409 Conflict</code>: Session ID already exists</p>"},{"location":"api_documentation.html#delete-session","title":"Delete Session","text":"<p>Endpoint: <code>DELETE /apps/{app_name}/users/{user_id}/sessions/{session_id}</code> Description: Delete a specific session by ID Input Schema: Path parameters - <code>app_name</code> (string, required): Name of the application - <code>user_id</code> (string, required): ID of the user - <code>session_id</code> (string, required): ID of the session to delete</p> <p>Output Schema: <pre><code>\"string\"\n</code></pre></p> <p>Status Codes: - <code>200 OK</code>: Successfully deleted session - <code>404 Not Found</code>: Session not found - <code>403 Forbidden</code>: Not authorized to delete this session</p>"},{"location":"api_documentation.html#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"api_documentation.html#register-user","title":"Register User","text":"<p>Endpoint: <code>POST /register</code> Description: Register a new user in the system Input Schema: <code>UserCreate</code> <pre><code>{\n  \"email\": \"string (valid email format)\",\n  \"full_name\": \"string (min length: 3)\",\n  \"password\": \"string (min length: 8)\"\n}\n</code></pre> Output Schema: <code>UserResponse</code> <pre><code>{\n  \"user_id\": \"string (UUID format)\",\n  \"email\": \"string (valid email format)\",\n  \"full_name\": \"string\"\n}\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully registered - <code>400 Bad Request</code>: Email already registered - <code>500 Internal Server Error</code>: Database error</p>"},{"location":"api_documentation.html#login-user","title":"Login User","text":"<p>Endpoint: <code>POST /login</code> Description: Authenticate a user and receive a JWT token Input Schema: <code>UserLogin</code> <pre><code>{\n  \"email\": \"string (valid email format)\",\n  \"password\": \"string\"\n}\n</code></pre> Output Schema: <code>Token</code> <pre><code>{\n  \"access_token\": \"string (JWT format)\",\n  \"token_type\": \"string (always 'bearer')\",\n  \"user_id\": \"string (UUID format)\",\n  \"full_name\": \"string\"\n}\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully authenticated - <code>401 Unauthorized</code>: Incorrect email or password</p>"},{"location":"api_documentation.html#change-password","title":"Change Password","text":"<p>Endpoint: <code>POST /change-password</code> Description: Change a user's password by email and current password Input Schema: <code>ChangePasswordRequest</code> <pre><code>{\n  \"current_password\": \"string\",\n  \"current_email\": \"string (valid email format)\",\n  \"new_password\": \"string (min length: 8)\"\n}\n</code></pre> Output Schema: <pre><code>{\n  \"message\": \"Password changed successfully\"\n}\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully changed password - <code>400 Bad Request</code>: Current password is incorrect - <code>404 Not Found</code>: User not found - <code>500 Internal Server Error</code>: Database error</p>"},{"location":"api_documentation.html#agent-interaction-endpoints","title":"Agent Interaction Endpoints","text":""},{"location":"api_documentation.html#run-with-server-sent-events","title":"Run with Server-Sent Events","text":"<p>Endpoint: <code>POST /run_sse</code> Description: Standard-compatible endpoint that matches the ADK API format, supporting both streaming and non-streaming responses. Get the response from Agent LLM  Input Schema: <code>RunRequest</code> <pre><code>{\n  \"app_name\": \"string\",\n  \"user_id\": \"string\",\n  \"session_id\": \"string\",\n  \"new_message\": {\n    \"role\": \"string (usually 'user')\",\n    \"parts\": [\n      {\n        \"text\": \"string\"\n      }\n    ]\n  },\n  \"streaming\": \"boolean (default: false)\"\n}\n</code></pre> Output (Streaming): Server-Sent Events stream (Content-Type: text/event-stream) <pre><code>data: {\"output\": \"string\", \"is_final\": false}\n\ndata: {\"output\": \"string\", \"is_final\": true}\n\ndata: [DONE]\n</code></pre></p> <p>Output Schema (Non-Streaming): <pre><code>{\n  \"output\": \"string\"\n}\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully processed - <code>400 Bad Request</code>: Invalid message format - <code>500 Internal Server Error</code>: Processing error</p>"},{"location":"api_documentation.html#get-final-answer-streaming","title":"Get Final Answer (Streaming)","text":"<p>Endpoint: <code>POST /get-final-answer</code> Description: Get only the agent's final answer, hiding all intermediate \"thinking\" steps Input Schema: <code>ChatRequest</code> <pre><code>{\n  \"prompt\": \"string\",\n  \"session_id\": \"string | null (optional)\"\n}\n</code></pre> Output: Streaming text response (Content-Type: text/plain) Status Codes: - <code>200 OK</code>: Successfully processed - <code>500 Internal Server Error</code>: ADK Runner not initialized</p>"},{"location":"api_documentation.html#direct-answer-non-streaming","title":"Direct Answer (Non-Streaming)","text":"<p>Endpoint: <code>POST /direct-answer</code> Description: Simple JSON endpoint that returns only the final answer without streaming Input Schema: <code>ChatRequest</code> <pre><code>{\n  \"prompt\": \"string\",\n  \"session_id\": \"string | null (optional)\"\n}\n</code></pre> Output Schema: <pre><code>{\n  \"response\": \"string\"\n}\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully processed - <code>500 Internal Server Error</code>: ADK Runner not initialized</p>"},{"location":"api_documentation.html#process-text","title":"Process Text","text":"<p>Endpoint: <code>POST /process-text</code> Description: Process text to extract and convert image URLs from markdown format to direct access URLs Input Schema: <code>TextRequest</code> <pre><code>{\n  \"text\": \"string\"\n}\n</code></pre> Output Schema: <pre><code>{\n  \"original_text\": \"string\",\n  \"processed_text\": \"string\",\n  \"url_mapping\": {\n    \"original_url\": \"direct_url\"\n  }\n}\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully processed - <code>500 Internal Server Error</code>: Processing error</p>"},{"location":"api_documentation.html#pubsub-integration-endpoints","title":"Pub/Sub Integration Endpoints","text":""},{"location":"api_documentation.html#pubsub-push-handler","title":"Pub/Sub Push Handler","text":"<p>Endpoint: <code>POST /run_sse_pubsub</code> Description: Pub/Sub push handler that processes messages and publishes responses back to Pub/Sub Input Schema: <code>PubSubPushEnvelope</code> <pre><code>{\n  \"message\": {\n    \"data\": \"string (base64 encoded)\",\n    \"message_id\": \"string\",\n    \"publish_time\": \"string\"\n  },\n  \"subscription\": \"string\"\n}\n</code></pre> Output: No content (HTTP 204) Status Codes: - <code>204 No Content</code>: Successfully processed and acknowledged</p>"},{"location":"api_documentation.html#start-pubsub-monitoring","title":"Start Pub/Sub Monitoring","text":"<p>Endpoint: <code>POST /pubsub/start</code> Description: Start Pub/Sub message monitoring Input Schema: No parameters required Output Schema: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Pub/Sub monitoring started\",\n  \"subscription\": \"string\"\n}\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully started monitoring - <code>500 Internal Server Error</code>: Failed to start monitoring</p>"},{"location":"api_documentation.html#stop-pubsub-monitoring","title":"Stop Pub/Sub Monitoring","text":"<p>Endpoint: <code>POST /pubsub/stop</code> Description: Stop Pub/Sub message monitoring Input Schema: No parameters required Output Schema: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Pub/Sub monitoring stopped\"\n}\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully stopped monitoring - <code>500 Internal Server Error</code>: Failed to stop monitoring</p>"},{"location":"api_documentation.html#get-pubsub-status","title":"Get Pub/Sub Status","text":"<p>Endpoint: <code>GET /pubsub/status</code> Description: Get Pub/Sub monitoring status and subscription details Input Schema: No parameters required Output Schema: <pre><code>{\n  \"status\": \"healthy\",\n  \"monitoring_active\": \"boolean\",\n  \"subscription\": {\n    \"name\": \"string\",\n    \"topic\": \"string\",\n    \"ack_deadline_seconds\": \"number\",\n    \"message_retention_duration\": \"string\",\n    \"state\": \"ACTIVE\"\n  },\n  \"outgoing_subscription\": \"string\"\n}\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully retrieved status - <code>500 Internal Server Error</code>: Failed to retrieve status</p>"},{"location":"api_documentation.html#publish-message-to-pubsub","title":"Publish Message to Pub/Sub","text":"<p>Endpoint: <code>POST /pubsub/publish</code> Description: Publish a response message to Pub/Sub Input Schema: <code>PublishMessageRequest</code> <pre><code>{\n  \"user_id\": \"string\",\n  \"session_id\": \"string\",\n  \"app_name\": \"string\",\n  \"response_text\": \"string\",\n  \"streaming\": \"boolean (default: false)\",\n  \"subscription_name\": \"string (optional)\"\n}\n</code></pre> Output Schema: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Message published successfully\",\n  \"message_id\": \"string\",\n  \"subscription\": \"string\",\n  \"topic\": \"string\"\n}\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully published - <code>500 Internal Server Error</code>: Failed to publish message</p>"},{"location":"api_documentation.html#health-and-utility-endpoints","title":"Health and Utility Endpoints","text":""},{"location":"api_documentation.html#health-check","title":"Health Check","text":"<p>Endpoint: <code>GET /health</code> Description: Simple health check endpoint that returns 200 OK. Used by Cloud Run to determine if the service is ready to receive traffic. Input Schema: No parameters required Output: No content (HTTP 200) Status Codes: - <code>200 OK</code>: Service is healthy</p>"},{"location":"api_documentation.html#test-print","title":"Test Print","text":"<p>Endpoint: <code>GET /test-print</code> Description: Test endpoint to verify printing works Input Schema: No parameters required Output Schema: <pre><code>{\n  \"message\": \"Test print endpoint working\",\n  \"timestamp\": \"string (ISO format)\"\n}\n</code></pre> Status Codes: - <code>200 OK</code>: Successfully executed</p>"},{"location":"api_documentation.html#authentication","title":"Authentication","text":"<p>Most endpoints require authentication using a JWT token. Include the token in the Authorization header:</p> <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>The token is obtained from the <code>/login</code> endpoint and expires after 24 hours (JWT_EXPIRATION_MINUTES = 1440). </p>"},{"location":"api_documentation.html#data-models","title":"Data Models","text":""},{"location":"api_documentation.html#session-object","title":"Session Object","text":"<p>The Session object represents a conversation session between a user and the customer support agent. It contains the following fields:</p> <pre><code>{\n  \"id\": \"string\",                 // Unique identifier for the session\n  \"appName\": \"string\",            // Name of the application\n  \"userId\": \"string\",             // ID of the user who owns the session\n  \"state\": {                      // Session state data\n    \"additionalProp1\": {}         // Custom state properties\n  },\n  \"events\": [                     // Array of events in the session\n    {\n      \"content\": {                // Content of the event\n        \"parts\": [                // Parts that make up the content\n          {\n            \"videoMetadata\": {    // Metadata for video content\n              \"fps\": 0,\n              \"endOffset\": \"string\",\n              \"startOffset\": \"string\"\n            },\n            \"thought\": true,      // Whether this part is a thought (internal reasoning)\n            \"inlineData\": {       // Inline data like images\n              \"displayName\": \"string\",\n              \"data\": \"string\",\n              \"mimeType\": \"string\"\n            },\n            \"fileData\": {         // File attachment data\n              \"displayName\": \"string\",\n              \"fileUri\": \"string\",\n              \"mimeType\": \"string\"\n            },\n            \"thoughtSignature\": \"string\",\n            \"codeExecutionResult\": {  // Results of code execution\n              \"outcome\": \"OUTCOME_UNSPECIFIED\",\n              \"output\": \"string\"\n            },\n            \"executableCode\": {    // Code that can be executed\n              \"code\": \"string\",\n              \"language\": \"LANGUAGE_UNSPECIFIED\"\n            },\n            \"functionCall\": {      // Function call details\n              \"id\": \"string\",\n              \"args\": {\n                \"additionalProp1\": {}\n              },\n              \"name\": \"string\"\n            },\n            \"functionResponse\": {   // Response from function calls\n              \"willContinue\": true,\n              \"scheduling\": \"SCHEDULING_UNSPECIFIED\",\n              \"id\": \"string\",\n              \"name\": \"string\",\n              \"response\": {\n                \"additionalProp1\": {}\n              }\n            },\n            \"text\": \"string\"        // Plain text content\n          }\n        ],\n        \"role\": \"string\"           // Role of the content creator (user/assistant)\n      },\n      \"groundingMetadata\": {       // Metadata for grounding information\n        \"groundingChunks\": [       // Chunks of information used for grounding\n          {\n            \"retrievedContext\": {\n              \"ragChunk\": {\n                \"pageSpan\": {\n                  \"firstPage\": 0,\n                  \"lastPage\": 0\n                },\n                \"text\": \"string\"\n              },\n              \"text\": \"string\",\n              \"title\": \"string\",\n              \"uri\": \"string\"\n            },\n            \"web\": {\n              \"domain\": \"string\",\n              \"title\": \"string\",\n              \"uri\": \"string\"\n            }\n          }\n        ],\n        \"groundingSupports\": [     // Support information for grounding\n          {\n            \"confidenceScores\": [\n              0\n            ],\n            \"groundingChunkIndices\": [\n              0\n            ],\n            \"segment\": {\n              \"endIndex\": 0,\n              \"partIndex\": 0,\n              \"startIndex\": 0,\n              \"text\": \"string\"\n            }\n          }\n        ],\n        \"retrievalMetadata\": {\n          \"googleSearchDynamicRetrievalScore\": 0\n        },\n        \"retrievalQueries\": [\n          \"string\"\n        ],\n        \"searchEntryPoint\": {\n          \"renderedContent\": \"string\",\n          \"sdkBlob\": \"string\"\n        },\n        \"webSearchQueries\": [\n          \"string\"\n        ]\n      },\n      \"partial\": true,            // Whether this is a partial event\n      \"turnComplete\": true,       // Whether this turn is complete\n      \"errorCode\": \"string\",      // Error code if applicable\n      \"errorMessage\": \"string\",   // Error message if applicable\n      \"interrupted\": true,        // Whether this event was interrupted\n      \"customMetadata\": {         // Custom metadata\n        \"additionalProp1\": {}\n      },\n      \"usageMetadata\": {          // Usage statistics\n        \"cacheTokensDetails\": [\n          {\n            \"modality\": \"MODALITY_UNSPECIFIED\",\n            \"tokenCount\": 0\n          }\n        ],\n        \"cachedContentTokenCount\": 0,\n        \"candidatesTokenCount\": 0,\n        \"candidatesTokensDetails\": [\n          {\n            \"modality\": \"MODALITY_UNSPECIFIED\",\n            \"tokenCount\": 0\n          }\n        ],\n        \"promptTokenCount\": 0,\n        \"promptTokensDetails\": [\n          {\n            \"modality\": \"MODALITY_UNSPECIFIED\",\n            \"tokenCount\": 0\n          }\n        ],\n        \"thoughtsTokenCount\": 0,\n        \"toolUsePromptTokenCount\": 0,\n        \"toolUsePromptTokensDetails\": [\n          {\n            \"modality\": \"MODALITY_UNSPECIFIED\",\n            \"tokenCount\": 0\n          }\n        ],\n        \"totalTokenCount\": 0,\n        \"trafficType\": \"TRAFFIC_TYPE_UNSPECIFIED\"\n      },\n      \"invocationId\": \"\",         // ID of the invocation\n      \"author\": \"string\",         // Author of the event\n      \"actions\": {                // Actions associated with the event\n        \"skipSummarization\": true,\n        \"stateDelta\": {\n          \"additionalProp1\": {}\n        },\n        \"artifactDelta\": {\n          \"additionalProp1\": 0,\n          \"additionalProp2\": 0,\n          \"additionalProp3\": 0\n        },\n        \"transferToAgent\": \"string\",\n        \"escalate\": true,\n        \"requestedAuthConfigs\": {\n          \"additionalProp1\": {\n            \"authScheme\": {\n              \"type\": \"apiKey\",\n              \"description\": \"string\",\n              \"in\": \"query\",\n              \"name\": \"string\",\n              \"additionalProp1\": {}\n            },\n            \"rawAuthCredential\": {\n              \"authType\": \"apiKey\",\n              \"resourceRef\": \"string\",\n              \"apiKey\": \"string\",\n              \"http\": {\n                \"scheme\": \"string\",\n                \"credentials\": {\n                  \"username\": \"string\",\n                  \"password\": \"string\",\n                  \"token\": \"string\",\n                  \"additionalProp1\": {}\n                },\n                \"additionalProp1\": {}\n              },\n              \"serviceAccount\": {\n                \"serviceAccountCredential\": {\n                  \"type\": \"\",\n                  \"projectId\": \"string\",\n                  \"privateKeyId\": \"string\",\n                  \"privateKey\": \"string\",\n                  \"clientEmail\": \"string\",\n                  \"clientId\": \"string\",\n                  \"authUri\": \"string\",\n                  \"tokenUri\": \"string\",\n                  \"authProviderX509CertUrl\": \"string\",\n                  \"clientX509CertUrl\": \"string\",\n                  \"universeDomain\": \"string\",\n                  \"additionalProp1\": {}\n                },\n                \"scopes\": [\n                  \"string\"\n                ],\n                \"useDefaultCredential\": false,\n                \"additionalProp1\": {}\n              },\n              \"oauth2\": {\n                \"clientId\": \"string\",\n                \"clientSecret\": \"string\",\n                \"authUri\": \"string\",\n                \"state\": \"string\",\n                \"redirectUri\": \"string\",\n                \"authResponseUri\": \"string\",\n                \"authCode\": \"string\",\n                \"accessToken\": \"string\",\n                \"refreshToken\": \"string\",\n                \"additionalProp1\": {}\n              },\n              \"additionalProp1\": {}\n            },\n            \"exchangedAuthCredential\": {\n              \"authType\": \"apiKey\",\n              \"resourceRef\": \"string\",\n              \"apiKey\": \"string\",\n              \"http\": {\n                \"scheme\": \"string\",\n                \"credentials\": {\n                  \"username\": \"string\",\n                  \"password\": \"string\",\n                  \"token\": \"string\",\n                  \"additionalProp1\": {}\n                },\n                \"additionalProp1\": {}\n              },\n              \"serviceAccount\": {\n                \"serviceAccountCredential\": {\n                  \"type\": \"\",\n                  \"projectId\": \"string\",\n                  \"privateKeyId\": \"string\",\n                  \"privateKey\": \"string\",\n                  \"clientEmail\": \"string\",\n                  \"clientId\": \"string\",\n                  \"authUri\": \"string\",\n                  \"tokenUri\": \"string\",\n                  \"authProviderX509CertUrl\": \"string\",\n                  \"clientX509CertUrl\": \"string\",\n                  \"universeDomain\": \"string\",\n                  \"additionalProp1\": {}\n                },\n                \"scopes\": [\n                  \"string\"\n                ],\n                \"useDefaultCredential\": false,\n                \"additionalProp1\": {}\n              },\n              \"oauth2\": {\n                \"clientId\": \"string\",\n                \"clientSecret\": \"string\",\n                \"authUri\": \"string\",\n                \"state\": \"string\",\n                \"redirectUri\": \"string\",\n                \"authResponseUri\": \"string\",\n                \"authCode\": \"string\",\n                \"accessToken\": \"string\",\n                \"refreshToken\": \"string\",\n                \"additionalProp1\": {}\n              },\n              \"additionalProp1\": {}\n            },\n            \"additionalProp1\": {}\n          }\n        }\n      },\n      \"longRunningToolIds\": [     // IDs of long-running tools\n        \"string\"\n      ],\n      \"branch\": \"string\",         // Branch information\n      \"id\": \"\",                   // Event ID\n      \"timestamp\": 0              // Event timestamp\n    }\n  ],\n  \"lastUpdateTime\": 0             // Last update timestamp\n}\n</code></pre>"}]}